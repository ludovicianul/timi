#!/usr/bin/env bash
#
# timi Bash Completion
# =======================
#
# Bash completion support for the `timi` command,
# generated by [picocli](https://picocli.info/) version 4.7.6.
#
# Installation
# ------------
#
# 1. Source all completion scripts in your .bash_profile
#
#   cd $YOUR_APP_HOME/bin
#   for f in $(find . -name "*_completion"); do line=". $(pwd)/$f"; grep "$line" ~/.bash_profile || echo "$line" >> ~/.bash_profile; done
#
# 2. Open a new bash console, and type `timi [TAB][TAB]`
#
# 1a. Alternatively, if you have [bash-completion](https://github.com/scop/bash-completion) installed:
#     Place this file in a `bash-completion.d` folder:
#
#   * /etc/bash-completion.d
#   * /usr/local/etc/bash-completion.d
#   * ~/bash-completion.d
#
# Documentation
# -------------
# The script is called by bash whenever [TAB] or [TAB][TAB] is pressed after
# 'timi (..)'. By reading entered command line parameters,
# it determines possible bash completions and writes them to the COMPREPLY variable.
# Bash then completes the user input if only one entry is listed in the variable or
# shows the options if more than one is listed in COMPREPLY.
#
# References
# ----------
# [1] http://stackoverflow.com/a/12495480/1440785
# [2] http://tiswww.case.edu/php/chet/bash/FAQ
# [3] https://www.gnu.org/software/bash/manual/html_node/The-Shopt-Builtin.html
# [4] http://zsh.sourceforge.net/Doc/Release/Options.html#index-COMPLETE_005fALIASES
# [5] https://stackoverflow.com/questions/17042057/bash-check-element-in-array-for-elements-in-another-array/17042655#17042655
# [6] https://www.gnu.org/software/bash/manual/html_node/Programmable-Completion.html#Programmable-Completion
# [7] https://stackoverflow.com/questions/3249432/can-a-bash-tab-completion-script-be-used-in-zsh/27853970#27853970
#

if [ -n "$BASH_VERSION" ]; then
  # Enable programmable completion facilities when using bash (see [3])
  shopt -s progcomp
elif [ -n "$ZSH_VERSION" ]; then
  # Make alias a distinct command for completion purposes when using zsh (see [4])
  setopt COMPLETE_ALIASES
  alias compopt=complete

  # Enable bash completion in zsh (see [7])
  # Only initialize completions module once to avoid unregistering existing completions.
  if ! type compdef > /dev/null; then
    autoload -U +X compinit && compinit
  fi
  autoload -U +X bashcompinit && bashcompinit
fi

# CompWordsContainsArray takes an array and then checks
# if all elements of this array are in the global COMP_WORDS array.
#
# Returns zero (no error) if all elements of the array are in the COMP_WORDS array,
# otherwise returns 1 (error).
function CompWordsContainsArray() {
  declare -a localArray
  localArray=("$@")
  local findme
  for findme in "${localArray[@]}"; do
    if ElementNotInCompWords "$findme"; then return 1; fi
  done
  return 0
}
function ElementNotInCompWords() {
  local findme="$1"
  local element
  for element in "${COMP_WORDS[@]}"; do
    if [[ "$findme" = "$element" ]]; then return 1; fi
  done
  return 0
}

# The `currentPositionalIndex` function calculates the index of the current positional parameter.
#
# currentPositionalIndex takes three parameters:
# the command name,
# a space-separated string with the names of options that take a parameter, and
# a space-separated string with the names of boolean options (that don't take any params).
# When done, this function echos the current positional index to std_out.
#
# Example usage:
# local currIndex=$(currentPositionalIndex "mysubcommand" "$ARG_OPTS" "$FLAG_OPTS")
function currentPositionalIndex() {
  local commandName="$1"
  local optionsWithArgs="$2"
  local booleanOptions="$3"
  local previousWord
  local result=0

  for i in $(seq $((COMP_CWORD - 1)) -1 0); do
    previousWord=${COMP_WORDS[i]}
    if [ "${previousWord}" = "$commandName" ]; then
      break
    fi
    if [[ "${optionsWithArgs}" =~ ${previousWord} ]]; then
      ((result-=2)) # Arg option and its value not counted as positional param
    elif [[ "${booleanOptions}" =~ ${previousWord} ]]; then
      ((result-=1)) # Flag option itself not counted as positional param
    fi
    ((result++))
  done
  echo "$result"
}

# compReplyArray generates a list of completion suggestions based on an array, ensuring all values are properly escaped.
#
# compReplyArray takes a single parameter: the array of options to be displayed
#
# The output is echoed to std_out, one option per line.
#
# Example usage:
# local options=("foo", "bar", "baz")
# local IFS=$'\n'
# COMPREPLY=($(compReplyArray "${options[@]}"))
function compReplyArray() {
  declare -a options
  options=("$@")
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local i
  local quoted
  local optionList=()

  for (( i=0; i<${#options[@]}; i++ )); do
    # Double escape, since we want escaped values, but compgen -W expands the argument
    printf -v quoted %q "${options[i]}"
    quoted=\'${quoted//\'/\'\\\'\'}\'

    optionList[i]=$quoted
  done

  # We also have to add another round of escaping to $curr_word.
  curr_word=${curr_word//\\/\\\\}
  curr_word=${curr_word//\'/\\\'}

  # Actually generate completions.
  local IFS=$'\n'
  echo -e "$(compgen -W "${optionList[*]}" -- "$curr_word")"
}

# Bash completion entry point function.
# _complete_timi finds which commands and subcommands have been specified
# on the command line and delegates to the appropriate function
# to generate possible options and subcommands for the last specified subcommand.
function _complete_timi() {
  # Edge case: if command line has no space after subcommand, then don't assume this subcommand is selected (remkop/picocli#1468).
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} add" ];    then _picocli_timi; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config" ];    then _picocli_timi; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} delete" ];    then _picocli_timi; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} edit" ];    then _picocli_timi; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} list" ];    then _picocli_timi; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} stats" ];    then _picocli_timi; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} notes" ];    then _picocli_timi; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} search" ];    then _picocli_timi; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} analyze" ];    then _picocli_timi; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} info" ];    then _picocli_timi; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} index" ];    then _picocli_timi; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} timeline" ];    then _picocli_timi; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} export" ];    then _picocli_timi; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} batch" ];    then _picocli_timi; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} generate-completion" ];    then _picocli_timi; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config add-tag" ];    then _picocli_timi_config; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config add-type" ];    then _picocli_timi_config; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config prune" ];    then _picocli_timi_config; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config remove-type" ];    then _picocli_timi_config; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config remove-tag" ];    then _picocli_timi_config; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config show-tags" ];    then _picocli_timi_config; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config show-types" ];    then _picocli_timi_config; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config validate" ];    then _picocli_timi_config; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config list" ];    then _picocli_timi_config; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} index rebuild" ];    then _picocli_timi_index; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} index validate" ];    then _picocli_timi_index; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} index show" ];    then _picocli_timi_index; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} batch add" ];    then _picocli_timi_batch; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} batch delete" ];    then _picocli_timi_batch; return $?; fi

  # Find the longest sequence of subcommands and call the bash function for that subcommand.
  local cmds0=(add)
  local cmds1=(config)
  local cmds2=(delete)
  local cmds3=(edit)
  local cmds4=(list)
  local cmds5=(stats)
  local cmds6=(notes)
  local cmds7=(search)
  local cmds8=(analyze)
  local cmds9=(info)
  local cmds10=(index)
  local cmds11=(timeline)
  local cmds12=(export)
  local cmds13=(batch)
  local cmds14=(generate-completion)
  local cmds15=(config add-tag)
  local cmds16=(config add-type)
  local cmds17=(config prune)
  local cmds18=(config remove-type)
  local cmds19=(config remove-tag)
  local cmds20=(config show-tags)
  local cmds21=(config show-types)
  local cmds22=(config validate)
  local cmds23=(config list)
  local cmds24=(index rebuild)
  local cmds25=(index validate)
  local cmds26=(index show)
  local cmds27=(batch add)
  local cmds28=(batch delete)

  if CompWordsContainsArray "${cmds28[@]}"; then _picocli_timi_batch_delete; return $?; fi
  if CompWordsContainsArray "${cmds27[@]}"; then _picocli_timi_batch_add; return $?; fi
  if CompWordsContainsArray "${cmds26[@]}"; then _picocli_timi_index_show; return $?; fi
  if CompWordsContainsArray "${cmds25[@]}"; then _picocli_timi_index_validate; return $?; fi
  if CompWordsContainsArray "${cmds24[@]}"; then _picocli_timi_index_rebuild; return $?; fi
  if CompWordsContainsArray "${cmds23[@]}"; then _picocli_timi_config_list; return $?; fi
  if CompWordsContainsArray "${cmds22[@]}"; then _picocli_timi_config_validate; return $?; fi
  if CompWordsContainsArray "${cmds21[@]}"; then _picocli_timi_config_showtypes; return $?; fi
  if CompWordsContainsArray "${cmds20[@]}"; then _picocli_timi_config_showtags; return $?; fi
  if CompWordsContainsArray "${cmds19[@]}"; then _picocli_timi_config_removetag; return $?; fi
  if CompWordsContainsArray "${cmds18[@]}"; then _picocli_timi_config_removetype; return $?; fi
  if CompWordsContainsArray "${cmds17[@]}"; then _picocli_timi_config_prune; return $?; fi
  if CompWordsContainsArray "${cmds16[@]}"; then _picocli_timi_config_addtype; return $?; fi
  if CompWordsContainsArray "${cmds15[@]}"; then _picocli_timi_config_addtag; return $?; fi
  if CompWordsContainsArray "${cmds14[@]}"; then _picocli_timi_generatecompletion; return $?; fi
  if CompWordsContainsArray "${cmds13[@]}"; then _picocli_timi_batch; return $?; fi
  if CompWordsContainsArray "${cmds12[@]}"; then _picocli_timi_export; return $?; fi
  if CompWordsContainsArray "${cmds11[@]}"; then _picocli_timi_timeline; return $?; fi
  if CompWordsContainsArray "${cmds10[@]}"; then _picocli_timi_index; return $?; fi
  if CompWordsContainsArray "${cmds9[@]}"; then _picocli_timi_info; return $?; fi
  if CompWordsContainsArray "${cmds8[@]}"; then _picocli_timi_analyze; return $?; fi
  if CompWordsContainsArray "${cmds7[@]}"; then _picocli_timi_search; return $?; fi
  if CompWordsContainsArray "${cmds6[@]}"; then _picocli_timi_notes; return $?; fi
  if CompWordsContainsArray "${cmds5[@]}"; then _picocli_timi_stats; return $?; fi
  if CompWordsContainsArray "${cmds4[@]}"; then _picocli_timi_list; return $?; fi
  if CompWordsContainsArray "${cmds3[@]}"; then _picocli_timi_edit; return $?; fi
  if CompWordsContainsArray "${cmds2[@]}"; then _picocli_timi_delete; return $?; fi
  if CompWordsContainsArray "${cmds1[@]}"; then _picocli_timi_config; return $?; fi
  if CompWordsContainsArray "${cmds0[@]}"; then _picocli_timi_add; return $?; fi

  # No subcommands were specified; generate completions for the top-level command.
  _picocli_timi; return $?;
}

# Generates completions for the options and subcommands of the `timi` command.
function _picocli_timi() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="add config delete edit list stats notes search analyze info index timeline export batch generate-completion"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `add` subcommand.
function _picocli_timi_add() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--interactive -i -h --help -V --version"
  local arg_opts="--start -s --duration -d --type -t --tags --tag --note -n"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --start|-s)
      return
      ;;
    --duration|-d)
      return
      ;;
    --type|-t)
      return
      ;;
    --tags|--tag)
      return
      ;;
    --note|-n)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `config` subcommand.
function _picocli_timi_config() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="add-tag add-type prune remove-type remove-tag show-tags show-types validate list"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `delete` subcommand.
function _picocli_timi_delete() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--force -f -h --help -V --version"
  local arg_opts="--id -i"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --id|-i)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `edit` subcommand.
function _picocli_timi_edit() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--interactive -h --help -V --version"
  local arg_opts="--id -i --start -s --duration -d --note -n --type -t --tags -tag"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --id|-i)
      return
      ;;
    --start|-s)
      return
      ;;
    --duration|-d)
      return
      ;;
    --note|-n)
      return
      ;;
    --type|-t)
      return
      ;;
    --tags|-tag)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_timi_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--today --show-tags --show-ids -h --help -V --version"
  local arg_opts="--month -m --from --day --to --only-tag --count-mode"
  local countMode_option_args=("full" "split") # --count-mode values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --month|-m)
      return
      ;;
    --from)
      return
      ;;
    --day)
      return
      ;;
    --to)
      return
      ;;
    --only-tag)
      return
      ;;
    --count-mode)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${countMode_option_args[@]}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `stats` subcommand.
function _picocli_timi_stats() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--daily-breakdown -h --help -V --version"
  local arg_opts="--group-by --count-mode --day --from --to"
  local groupBy_option_args=("type" "tag") # --group-by values
  local countMode_option_args=("full" "split") # --count-mode values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --group-by)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${groupBy_option_args[@]}" ) )
      return $?
      ;;
    --count-mode)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${countMode_option_args[@]}" ) )
      return $?
      ;;
    --day)
      return
      ;;
    --from)
      return
      ;;
    --to)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `notes` subcommand.
function _picocli_timi_notes() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help -V --version"
  local arg_opts="--tag --month --day"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --tag)
      return
      ;;
    --month)
      return
      ;;
    --day)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `search` subcommand.
function _picocli_timi_search() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--summary -h --help -V --version"
  local arg_opts="--tag --type --note --from --to"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --tag)
      return
      ;;
    --type)
      return
      ;;
    --note)
      return
      ;;
    --from)
      return
      ;;
    --to)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `analyze` subcommand.
function _picocli_timi_analyze() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--context-switch --peak --focus-score --dow-insights -h --help -V --version"
  local arg_opts="--by --target"
  local by_option_args=("day" "week") # --by values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --by)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${by_option_args[@]}" ) )
      return $?
      ;;
    --target)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `info` subcommand.
function _picocli_timi_info() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `index` subcommand.
function _picocli_timi_index() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="rebuild validate show"
  local flag_opts=""
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `timeline` subcommand.
function _picocli_timi_timeline() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help -V --version"
  local arg_opts="--from --to --view --chart-width"
  local viewMode_option_args=("day" "week" "month") # --view values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --from)
      return
      ;;
    --to)
      return
      ;;
    --view)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${viewMode_option_args[@]}" ) )
      return $?
      ;;
    --chart-width)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `export` subcommand.
function _picocli_timi_export() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help -V --version"
  local arg_opts="--format -f --from --to --type -t --tags --tag --output -o"
  local format_option_args=("csv" "json") # --format values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --format|-f)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${format_option_args[@]}" ) )
      return $?
      ;;
    --from)
      return
      ;;
    --to)
      return
      ;;
    --type|-t)
      return
      ;;
    --tags|--tag)
      return
      ;;
    --output|-o)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `batch` subcommand.
function _picocli_timi_batch() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="add delete"
  local flag_opts=""
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `generate-completion` subcommand.
function _picocli_timi_generatecompletion() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `add-tag` subcommand.
function _picocli_timi_config_addtag() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help -V --version"
  local arg_opts="--name -n"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --name|-n)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `add-type` subcommand.
function _picocli_timi_config_addtype() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help -V --version"
  local arg_opts="--name -n"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --name|-n)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `prune` subcommand.
function _picocli_timi_config_prune() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `remove-type` subcommand.
function _picocli_timi_config_removetype() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help -V --version"
  local arg_opts="--name -n"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --name|-n)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `remove-tag` subcommand.
function _picocli_timi_config_removetag() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help -V --version"
  local arg_opts="--name -n"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --name|-n)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `show-tags` subcommand.
function _picocli_timi_config_showtags() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `show-types` subcommand.
function _picocli_timi_config_showtypes() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `validate` subcommand.
function _picocli_timi_config_validate() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_timi_config_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `rebuild` subcommand.
function _picocli_timi_index_rebuild() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts=""
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `validate` subcommand.
function _picocli_timi_index_validate() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts=""
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `show` subcommand.
function _picocli_timi_index_show() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts=""
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `add` subcommand.
function _picocli_timi_batch_add() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts=""
  local arg_opts="--file"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `delete` subcommand.
function _picocli_timi_batch_delete() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts=""
  local arg_opts="--file"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Define a completion specification (a compspec) for the
# `timi`, `timi.sh`, and `timi.bash` commands.
# Uses the bash `complete` builtin (see [6]) to specify that shell function
# `_complete_timi` is responsible for generating possible completions for the
# current word on the command line.
# The `-o default` option means that if the function generated no matches, the
# default Bash completions and the Readline default filename completions are performed.
complete -F _complete_timi -o default timi timi.sh timi.bash

